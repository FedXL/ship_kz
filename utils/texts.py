import random
import re
import aiogram.utils.markdown as md
from aiogram import types
from aiogram.types import CallbackQuery
from utils.utils_lite import create_counter


def make_text_hello(username):
    text_hello = md.text(
        md.text("ü´±   –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,", "*",username ,"*","!","–Ø –ë–æ—Ç-–ü–æ–º–æ—â–Ω–∏–∫."),
        md.text(" "),
        md.text("üî∏  –ú–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ , –≤ —Ä–∞–∑–¥–µ–ª–µ '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'."),
        md.text(""),
        md.text("üî∏  –û—Ç–≤–µ—Ç—ã –Ω–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ 'K–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'."),
        md.text(" "),
        md.text("üó£  –í —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∏, –µ—Å–ª–∏ —Ä–∞–∑–¥–µ–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –Ω–µ –ø–æ–º–æ–≥, –¥–ª—è —Å–≤—è–∑–∏ —Å –∂–∏–≤—ã–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç. "),
        # md.text(" "),
        # md.text("üî∏     –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: /help"),
        # md.text("–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π /help "),
        sep="\n"
    )
    return text_hello





def make_text_for_FAQ(value: str):
    try:
        with open("storages" + value + ".html", "r", ) as fi:
            result = fi.read()
            fi.close()
    except Exception as ex:
        print("—á–µ—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
    return result


def make_user_info_report(query: CallbackQuery, order_id=None) -> md.text():
    user_id = query.from_user.id
    user_first_name = query.from_user.first_name
    user_second_name = query.from_user.last_name
    username = query.from_user.username
    result = md.text(
        md.text(f" #{order_id}"),
        md.text(f"Type: <b>{query.data}</b>"),
        md.text(f"User: ", md.hlink(f"#ID_{user_id}", f"tg://user?id={user_id}")),
        md.text(f"First Name: {user_first_name}"),
        md.text(f"Second Name: {user_second_name}"),
        md.text(f"UserName :  @{username}"),
        sep="\n"
    )
    return result


def make_user_info_report_from_message(message: types.Message):
    user_id = message.from_user.id
    user_first_name = message.from_user.first_name
    user_second_name = message.from_user.last_name
    username = message.from_user.username
    result = md.text(
        md.text(f"User:", md.hlink(f"#ID_{user_id}", f"tg://user?id={user_id}")),
        md.text(f"First Name: {user_first_name}"),
        md.text(f"Second Name: {user_second_name}"),
        md.text(f"UserName :  @{username}"),
        sep="\n"
    )
    return result


def make_mask_to_messages(income, user_id):
    assert isinstance(income, types.Message) or isinstance(income, types.CallbackQuery)

    user_first_name = income.from_user.first_name
    user_second_name = income.from_user.last_name
    username = income.from_user.username
    result = md.text(
        md.text(md.hlink(f"#ID_{user_id}", f"tg://user?id={user_id}")),
        md.text(f"{user_first_name}",
                f"{user_second_name}",
                f"@{username}", sep=" | "),
        sep="\n"
    )
    return result


def order_answer_vocabulary(income,order_id):
    if order_id:
        order_id+=100
    match income:
        case 'KAZ_ORDER_LINKS':
            text = ['–í–∞—Ä–∏–∞–Ω—Ç 1', f'–ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω ‚Ññ{order_id}', '—Å—Å—ã–ª–∫–∏']
        case 'KAZ_ORDER_CABINET':
            text = ['–í–∞—Ä–∏–∞–Ω—Ç 1', f'–ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω ‚Ññ{order_id}', '–¥–æ—Å—Ç—É–ø –≤ –∫–∞–±–∏–Ω–µ—Ç']
        case 'TRADEINN':
            text = ['–í–∞—Ä–∏–∞–Ω—Ç 2', f'–ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ TradeInn ‚Ññ{order_id}']
        case 'PAYMENT':
            text = ['–í–∞—Ä–∏–∞–Ω—Ç 3', f'–í—ã–∫—É–ø —á–µ—Ä–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞ ‚Ññ{order_id}']
    return text


def make_links_info_text(links):
    counter = create_counter()
    md_obj = [md.hlink("—Å—Å—ã–ª–∫–∞ " + str(counter()), link) for link in links]
    return md_obj


def get_vaflalist(pos=1):
    if pos == 1:
        result = ('–ø–µ—Ä–≤–∞—è',
                  '–≤—Ç–æ—Ä–∞—è',
                  '—Ç—Ä–µ—Ç—å—è',
                  '—á–µ—Ç–≤–µ—Ä—Ç–∞—è',
                  '–ø—è—Ç–∞—è',
                  '—à–µ—Å—Ç–∞—è',
                  '—Å–µ–¥—å–º–∞—è',
                  '–≤–æ—Å—å–º–∞—è',
                  '–¥–µ–≤—è—Ç–∞—è',
                  '–¥–µ—Å—è—Ç–∞—è',
                  '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–∞—è',
                  '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–∞—è',
                  '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç–∞—è',
                  '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç–∞—è',
                  '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∞—è')
    elif pos == 2:
        result = ('–ø–µ—Ä–≤–æ–π',
                  '–≤—Ç–æ—Ä–æ–π',
                  '—Ç—Ä–µ—Ç—å–µ–π',
                  '—á–µ—Ç–≤–µ—Ä—Ç–æ–π',
                  '–ø—è—Ç–æ–π',
                  '—à–µ—Å—Ç–æ–π',
                  '—Å–µ–¥—å–º–æ–π',
                  '–≤–æ—Å—å–º–æ–π',
                  '–¥–µ–≤—è—Ç–æ–π',
                  '–¥–µ—Å—è—Ç–æ–π',
                  '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–æ–π',
                  '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–π',
                  '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç–æ–π',
                  '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç–æ–π',
                  '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–π',)
    return result


def get_additional_from_proxi(data):
    print("data "*10, data,sep="\n")
    addition = []
    hrefs = [data.get(key) for key in [('href_' + str(key)) for key in
                                       [i for i in range(1, data.get('num') + 1)]]]
    comments = [data.get(key) for key in
                [('comment_' + str(key)) for key in
                 [i for i in range(1, data.get('num') + 1)]]]
    link = iter(make_links_info_text(hrefs))
    comment = iter(comments)
    addition.append(md.text('shop: ', f"<code>{data['shop']}</code>"))
    for x in hrefs:
        new = md.text(next(link), ": ", f"{next(comment)}")
        addition.append(new)
    return addition


def get_id_from_text(text):
    id = re.search(r"#ID_(\d+)", text)
    if id:
        return id.group(1)
    else:
        return None


def make_message_text(message: list) -> md.text():

    result = []
    before = message[:1]
    after = message[1:]

    for is_answer, body in before:
        if is_answer:
            pointer = "‚úÖ"
            if len(body)>50:
                body = str(body[:50]) + "..."
        else:
            pointer = "üÜò"

        result.append(md.text(pointer, body, sep=" "))
        result.append(md.text(" "))

    for is_answer, body in after:
        if is_answer:
            pointer = ''
        else:
            pointer = 'üëà'
        if len(str(body)) >= 80:
            insert_text = str(body)[:60] + "..."
        else:
            insert_text = str(body)

        result.append(md.text(pointer, insert_text, sep=" "))
    return result




def make_message_text_full(message: list) -> md.text():
    result = []
    before = message[:1]
    after = message[1:]

    for is_answer, body in before:
        if is_answer:
            pointer = "‚úÖ"
        else:
            pointer = "üÜò"
        result.append(md.text(pointer, body, sep=" "))
        result.append(md.text(" "))
    for is_answer, body in after:
        if is_answer:
            pointer = ''
        else:
            pointer = 'üëà'
        result.append(md.text(pointer, body, sep=" "))
    return result
